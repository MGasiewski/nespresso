package nespresso.processing;
import java.util.HashSet;
import java.util.Set;

import com.sun.tools.javac.util.List;

public class OpcodeLookup {
	public static final Set<Integer> oneByteOpcodes = new HashSet<>(List.of(
			0x0A, // ASL
			0x00, // BRK
			0x10, 0x30, 0x50, 0x70, 0x90, 0xB0, 0xD0, 0xF0, //TODO these belong somewhere else perhaps Branch instructions 
			0x18, 0x38, 0x58, 0x78, 0xB8, 0xD8, // Flag Status instructions
			0x4A, // LSR
			0xEA, // NOP
			0xAA, 0x8A, 0xCA, 0xE8, 0xA8, 0x98, 0x88, 0xC8, // Register Instructions
			0x2A, // ROL
			0x6A, // ROR
			0x40, // RTI
			0x60, // RTS
			0x9A, 0xBA, 0x48, 0x68, 0x08, 0x28 // Stack Instructions
	));
	public static final Set<Integer> twoByteOpcodes = new HashSet<>(List.of(
			0x69, 0x65, 0x75, 0x61, 0x71, // ADC
			0x29, 0x25, 0x35, 0x21, 0x31, // AND
			0x06, 0x16, // ASL
			0x24, // BIT
			0xC9, 0xC5, 0xD5, 0xC1, 0xD1, // CMP
			0xE0, 0xE4, // CPX
			0xC0, 0xC4, // CPY
			0xC6, 0xD6, // DEC
			0x49, 0x45, 0x55, 0x41, 0x51, // EOR
			0xE6, 0xF6, // INC
			0xA9, 0xA5, 0xB5, 0xA1, 0xB1, // LDA
			0xA2, 0xA6, 0xB6, // LDX
			0xA0, 0xA4, 0xB4, // LDY
			0x46, 0x56, // LSR
			0x09, 0x05, 0x15, 0x01, 0x11, // ORA
			0x26, 0x36, // ROL
			0x66, 0x76, // ROR
			0xE9, 0xE5, 0xF5, 0xE1, 0xF1, // SBC
			0x85, 0x95, 0x81, 0x91, // STA
			0x86, 0x96, // STX
			0x84, 0x94 // STY
	));
	public static final Set<Integer> threeByteOpcodes = new HashSet<>(List.of(
			0x6D, 0x7D, 0x79, // ADC
			0x2D, 0x3D, 0x39, // AND
			0x0E, 0x1E, // ASL
			0x2C, // BIT
			0xCD, 0xDD, 0xD9, // CMP
			0xEC, // CPX
			0xCC, // CPY
			0xCE, 0xDE, // DEC
			0x4D, 0x5D, 0x59, // EOR
			0xEE, 0xFE, // INC
			0x4C, 0x6C, // JMP
			0x20, // JSR
			0xAD, 0xBD, 0xB9, // LDA
			0xAE, 0xBE, // LDX
			0xAC, 0xBC, // LDY
			0x4E, 0x5E, // LSR
			0x0D, 0x1D, 0x19, // ORA
			0x2E, 0x3E, // ROL
			0x6E, 0x7E, // ROR
			0xED, 0xFD, 0xF9, // SBC
			0x8D, 0x9D, 0x99, // STA
			0x8E, // STX
			0x8C // STY
	));

}
